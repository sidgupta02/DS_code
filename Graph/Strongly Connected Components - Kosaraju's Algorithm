//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution {
public:
    void dfs1(vector<vector<int>>& adj, int node, vector<bool>& vis, stack<int>& st) {
        vis[node] = true;
        for (auto it : adj[node]) {
            if (!vis[it]) {
                dfs1(adj, it, vis, st);
            }
        }
        st.push(node);
    }

    void dfs(int node, vector<vector<int>>& adj, vector<bool>& vis) {
        vis[node] = true;
        for (auto it : adj[node]) {
            if (!vis[it]) {
                dfs(it, adj, vis);
            }
        }
    }

    int kosaraju(int V, vector<vector<int>>& adj) {
        stack<int> st;
        vector<bool> vis(V, false);
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs1(adj, i, vis, st);
            }
        }

        vector<vector<int>> transpose(V);
        for (int i = 0; i < V; i++) {
            vis[i] = false;
            for (auto it : adj[i]) {
                transpose[it].push_back(i);
            }
        }

        int cnt = 0;
        while (!st.empty()) {
            int node = st.top();
            st.pop();
            if (!vis[node]) {
                dfs(node, transpose, vis);
                cnt++;
            }
        }
        return cnt;
    }
};


//{ Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<vector<int>> adj(V);

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
