class Solution {
public:
    vector<vector<string>> findSequences(string beginWord, string endWord, vector<string>& wordList) {
        
        vector<vector<string>> ans;
        
        unordered_set<string> st(wordList.begin(), wordList.end());
        queue<vector<string>> q;
        q.push({beginWord});
        
        if (st.find(beginWord) != st.end()){
            st.erase(beginWord);
        }
        
        vector<string> usedOnLevel;
        usedOnLevel.push_back(beginWord);
        int level = 0;
        
        while (!q.empty()) {
            
            vector<string> t = q.front();
            q.pop();
            string s = t.back();
            
            if(t.size()>level){
                level++;
                for(auto it:usedOnLevel){
                    st.erase(it);
                }
            }
            
            if (s == endWord) {
                ans.push_back(t);
                continue;
            }
            
            for (int i = 0; i < s.size(); i++) {
                string ch = s;

                for (char c = 'a'; c <= 'z'; c++) {
                    ch[i] = c;

                    if (st.find(ch) != st.end()) {
                        vector<string> am = t;
                        am.push_back(ch);
                        q.push(am);
                        usedOnLevel.push_back(ch);
                    }
                }
            }
        }
        
        return ans;
    }
};
