//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    int MinimumEffort(vector<vector<int>>& heights) {
        priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> pq;
        int n=heights.size();
        int m=heights[0].size();
        pq.push({0,{0,0}});
        vector<vector<int>> dis(n,vector<int>(m,INT_MAX));
        dis[0][0]=0;
        //int dism=0;
        
        int drow[]={-1,0,1,0};
        int dcol[]={0,1,0,-1};
        while(!pq.empty()){
            auto it=pq.top();
            int r=it.second.first;
            int c=it.second.second;
            int d=it.first;
            if(r==n-1 && c==m-1) return d;
            pq.pop();
            
            for(int i=0;i<4;i++){
                int row=r+drow[i];
                int col=c+dcol[i];
                if (row >= 0 && row < n && col >= 0 && col < m) {
                    int dif = max(d, abs(heights[r][c] - heights[row][col]));
                    if (dif < dis[row][col]) {
                        dis[row][col] = dif;
                        pq.push({dif, {row, col}});
                    }
                }
            }
            //cout<<"dfs";
        }
        return 0;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n,m; cin>>n>>m;
        vector<vector<int>> heights;
       
        for(int i=0; i<n; ++i){
            vector<int> temp;
            for(int j=0; j<m; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            heights.push_back(temp);
        }
       
        Solution obj;
        cout<<obj.MinimumEffort(heights)<<"\n";
    }
    return 0;
}
// } Driver Code Ends
