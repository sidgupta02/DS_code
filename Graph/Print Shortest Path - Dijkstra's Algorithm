//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        
        vector<pair<int,int>>adj[n+1];
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<int>deg(n+1,INT_MAX);
        vector<int>par(n+1);
        
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        pq.push({0,1});
        deg[1]=0;
        for(int i=1;i<=n;i++){
            par[i]=i;
        }
        
        
        while(!pq.empty()){
            //auto it=*pq.top();
            int node=pq.top().second;
            int d=pq.top().first;
            pq.pop();
            
            for(auto i:adj[node]){
                if(deg[i.first] > d+i.second){
                    par[i.first]=node;
                    deg[i.first]=d+ i.second;
                    pq.push({deg[i.first], i.first});
                }
            }
        }
        if(deg[n]==INT_MAX) return {-1};
        int node=n;
        vector<int>ans;
        while(par[node]!=node){
            ans.push_back(node);
            node=par[node];
        }
        ans.push_back(node);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
