private:
    bool dfs(int i, vector<int> &vis, vector<int> &pvis, vector<int> adj[]) {
        vis[i] = 1;
        pvis[i] = 1;

        // check for adjacent nodes
        for (auto it : adj[i]) {
            if (!vis[it]) {
                if (dfs(it, vis, pvis, adj)) return true;
            } else if (pvis[it]) return true;
        }

        // backtracking
        pvis[i] = 0;
        return false;
    }

public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V, 0);
        vector<int> pvis(V, 0);

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (dfs(i, vis, pvis, adj)) return true;
            }
        }
        return false;
    }
};



//using n space


@abhijeetkumar2970
1 month ago
Code using only single visited array:
class Solution {
    bool util(vector<int> adj[],int u,vector<int> &vis){
        vis[u] = 1;
        for(auto v:adj[u]){
            if(vis[v] == -1){
                if(util(adj,v,vis))
                    return true;
            }else if(vis[v] == 1)
                    return true;
        }
        vis[u] = 0;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> vis(V,-1);
        for(int i=0;i<V;i++){
            if(vis[i] == -1 && util(adj,i,vis))
                return true;
        }
        return false;
    }
};
