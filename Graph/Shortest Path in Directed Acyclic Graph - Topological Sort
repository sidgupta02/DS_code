class Solution {
private:
    void dfs(int i, vector<pair<int, int>> adj[], vector<int> &vis, stack<int> &st) {
        vis[i] = 1;

        for (auto it : adj[i]) {
            if (!vis[it.first]) {
                dfs(it.first, adj, vis, st);
            }
        }
        st.push(i);
    }

public:
    vector<int> shortestPath(int N, int M, vector<vector<int>> &edges) {
        vector<pair<int, int>> adj[N];
        for (int i = 0; i < M; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj[u].push_back({v, wt});
        }

        // Topological Sort using DFS
        vector<int> vis(N, 0);
        stack<int> st;
        for (int i = 0; i < N; i++) {
            if (!vis[i]) {
                dfs(i, adj, vis, st);
            }
        }

        // Distances
        vector<int> dist(N, 1e9);
        dist[0] = 0; // Distance to the source node is 0

        while (!st.empty()) {
            int node = st.top();
            st.pop();

            // If the distance to this node is not INF, update its neighbors
           
                for (auto it : adj[node]) {
                    int v = it.first;
                    int wt = it.second;

                    // Relaxation step for finding the shortest distance
                    if (dist[node] + wt < dist[v]) {
                        dist[v] = dist[node] + wt;
                    }
                }
            
        }
        for(int i=0;i<N;i++){
            if(dist[i]==1e9) dist[i]=-1;
        }
        return dist;
    }
};
