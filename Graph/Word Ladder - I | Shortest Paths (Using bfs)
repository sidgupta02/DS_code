class Solution {
public:
    int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
        //int c=0;
        queue<pair<string,int>> q;
        q.push({startWord,1});
        unordered_set<string> st(wordList.begin(),wordList.end());
        if(st.find(startWord) != st.end()){
            st.erase(startWord);
        }
        
        while(!q.empty()){
            string word=q.front().first;
            int steps=q.front().second;
            q.pop();
            if(word==targetWord) return steps;
            
            for(int i=0;i<word.size();i++){
                string t=word;
                for(int j=0;j<26;j++){
                    t[i]=j+'a';
                    if(st.find(t) != st.end()){
                        st.erase(t);
                        q.push({t,steps+1});
                    }
                }
            }
        }
        
        return 0;
        
    }
};
