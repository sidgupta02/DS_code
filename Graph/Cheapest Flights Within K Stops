//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        if(src==dst) return 0;
        
        queue<pair<int,pair<int,int>>>pq;
        //int n=flights.size();
        //int m=flights[0].size();
        
        vector<pair<int,int>>adj[n];
        for(auto it:flights){
            adj[it[0]].push_back({it[1],it[2]});
        }
        
        vector<int>dis(n,INT_MAX);
        dis[src]=0;
        pq.push({0,{src,0}});
        
        while(!pq.empty()){
            auto it=pq.front();
            int node=it.second.first;
            int dist=it.second.second;
            int step=it.first;
            pq.pop();
            if(step > K) continue;
            
            for(auto i:adj[node]){
                int nd=i.first;
                int d=i.second;
                if(d+dist < dis[nd] ){
                    dis[nd] = d+dist;
                    pq.push({step+1,{nd,dis[nd]}});
                }
            }
        }
        if(dis[dst]==INT_MAX) return -1;
        return dis[dst];
        
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n; cin>>n;
        int edge; cin>>edge;
        vector<vector<int>> flights;
        
        for(int i=0; i<edge; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            flights.push_back(temp);
        }
        
        int src,dst,k;
        cin>>src>>dst>>k;
        Solution obj;
        cout<<obj.CheapestFLight(n,flights,src,dst,k)<<"\n";
    }
    return 0;
}
// } Driver Code Ends
