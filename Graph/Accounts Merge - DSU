//{ Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class DisjointSet{
    vector<int>parent,size;
    public:
    DisjointSet(int n){
        //rank.resize(n+1,1);
        parent.resize(n+1);
        size.resize(n+1,1);
        for(int i=0;i<n+1;i++){
            parent[i]=i;
        }
    }
    int findsize(int node){
        return size[node];
    }
    int findParent(int node){
        if(node==parent[node]) return node;
        return parent[node]=findParent(parent[node]);
    }
    
    /*void doUnion(int u,int v){
        int par_u=findParent(u);
        int par_v=findParent(v);
        if(par_u == par_v) return;
        if(rank[par_u]<rank[par_v]) parent[par_u]=par_v;
        else if(rank[par_u]>rank[par_v]) parent[par_v]=par_u;
        else {
            parent[par_v]=par_u;
            rank[par_u]++;
        }
        return;
    }*/
    
    void doUnionBySize(int u,int v){
        int par_u=findParent(u);
        int par_v=findParent(v);
        if(par_u == par_v) return ;
        if(size[par_u] < size[par_v]) {
            parent[par_u]=par_v;
            size[par_v]+=size[par_u];
        }
        else{
            parent[par_v]=par_u;
            size[par_u]+=size[par_v];
        }
        return ;
        
    }
};

class Solution{
  public:
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
        int n=accounts.size();
        DisjointSet ds(n);
        unordered_map<string,int> um;
        
        //making disjoint set
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                string s=accounts[i][j];
                if(um.find(s) == um.end()){
                    um[s]=i;
                }
                else ds.doUnionBySize(i,um[s]);
            }
        }
        
        //meging them
        vector<string> adj[n];
        for(auto it:um){
            string mail=it.first;
            int node=ds.findParent(it.second);
            adj[node].push_back(mail);
            
        }
        
        //creating ans vector
        vector<vector<string>> ans;
        for(int i=0;i<n;i++){
            if(adj[i].size() == 0) continue;
            sort(adj[i].begin(),adj[i].end());
            
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            for(auto it:adj[i]) temp.push_back(it);
            ans.push_back(temp);
            
        }
        return ans;
        
    }
};


//{ Driver Code Starts.
int main()
{
  int t;
  cin >> t;
  while (t--)
  {
    int n;
    cin >> n;
    vector<vector<string>> accounts;

    for (int i = 0; i < n; i++)
    {
      vector<string> temp;
      int x;
      cin >> x;

      for (int j = 0; j < x; j++)
      {
        string s1;
        cin >> s1;
        temp.push_back(s1);
      }
      accounts.push_back(temp);
    }

    Solution obj;
    vector<vector<string>> res = obj.accountsMerge(accounts);
    sort(res.begin(), res.end());
    cout << "[";
    for (int i = 0; i < res.size(); ++i)
    {
      cout << "[";
      for (int j = 0; j < res[i].size(); j++)
      {
        if (j != res[i].size() - 1)
          cout << res[i][j] << ","
               << " ";
        else
          cout << res[i][j];
      }
      if (i != res.size() - 1)
        cout << "], " << endl;
      else
        cout << "]";
    }
    cout << "]"
         << endl;
  }
}
// } Driver Code Ends
