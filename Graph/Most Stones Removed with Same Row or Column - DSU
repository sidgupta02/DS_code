//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class DisjointSet{
    vector<int> parent,size;
    public:
    DisjointSet(int n){
        parent.resize(n+1);
        size.resize(n+1,1);
        for(int i=0;i<n+1;i++){
            parent[i]=i;
        }
    }
    int findsize(int node){
        return size[node];
    }
    int findParent(int node){
        if(node==parent[node]) return node;
        return parent[node]=findParent(parent[node]);
    }
    
    void doUnionBySize(int u,int v){
        int par_u=findParent(u);
        int par_v=findParent(v);
        if(par_u == par_v) return;
        if(size[par_u] < size[par_v]) {
            parent[par_u]=par_v;
            size[par_v]+=size[par_u];
        }
        else{
            parent[par_v]=par_u;
            size[par_u]+=size[par_v];
        }
        return;
        
    }
};


class Solution {
  public:
    int maxRemove(vector<vector<int>>& stones, int n) {
        
        
        //find max no. of rows and columns
        int mr=0;
        int mc=0;
        for(auto it:stones){
            mr=max(mr,it[0]);
            mc=max(mc,it[1]);
        }
        //make disjoint set for each row and col
        DisjointSet ds(mr+mc+1);
        
        //do union of nodes also make counter for which row and col has stone
        unordered_map<int,int> um;
        for(auto it:stones){
            int row=it[0];
            int col=it[1]+mr+1;
            ds.doUnionBySize(row,col);
            um[row]=1;
            um[col]=1;
        }
        
        int cnt=0;
        for(auto it:um){
            if(it.first== ds.findParent(it.first)) cnt++;
        }
        return n-cnt;
        
        
        // Code here
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> adj;

        for (int i = 0; i < n; ++i) {
            vector<int> temp;
            for (int i = 0; i < 2; ++i) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            adj.push_back(temp);
        }

        Solution obj;

        cout << obj.maxRemove(adj, n) << "\n";
    }
}
// } Driver Code Ends


//or by simple dfs


class Solution {
public:
    void dfs(int index,vector<vector<int>>&stones, vector<bool>&vis){
        vis[index]=true;
        for(int i=0;i<stones.size();i++){
            int r=stones[index][0];
            int c=stones[index][1];
            if(!vis[i]){
                if(stones[i][0] == r || stones[i][1] == c) dfs(i,stones,vis);
            }
        }
    }

    int removeStones(vector<vector<int>>& stones) {
        
        int n=stones.size();
        vector<bool> vis(n,false);
        int g=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                g++;
                dfs(i,stones,vis);
            }
        }
        return n-g;
    }
};
