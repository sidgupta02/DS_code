int pre(char c){
        if(c=='^')return 3;
        else if(c=='*' || c=='/') return 2;
        else if(c=='+' || c=='-') return 1;
        else return -1;
    }
    // Function to convert an infix expression to a postfix expression.
    string infixToPostfix(string s) {
    stack<char> st;
    string res;
    for (int i = 0; i < s.length(); i++) {
        if (isalpha(s[i]) || s[i]>='0' && s[i]<='9') {
            res += s[i];
        } else if (s[i] == '(') {
            st.push(s[i]);
        } else if (s[i] == ')') {
            while (!st.empty() && st.top() != '(') {
                res += st.top();
                st.pop();
            }
            if (!st.empty()) {
                st.pop(); // Remove the '(' from the stack
            }
        } else {
            while (!st.empty() && pre(st.top()) >= pre(s[i]) && st.top() != '(') {
                res += st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }

    while (!st.empty()) {
        res += st.top();
        st.pop();
    }

    return res;
}
