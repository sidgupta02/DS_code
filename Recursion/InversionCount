#include <bits/stdc++.h>

using namespace std;

int merge(int arr[],int temp[],int l,int mid,int r){
    int i,j,k;
    int inv_count=0;
    
    i=l;
    j=mid;
    k=l;
    
    while(i<= mid-1 && j <= r){
        if(arr[i] <= arr[j]){
            temp[k++]=arr[i++];
        }
        else{
            temp[k++]=arr[j++];
            
            inv_count=inv_count+(mid-i);
        }
    }
    
    while(i<= mid-1){
        temp[k++]=arr[i++];
    }
    while(j<= r){
        temp[k++]=temp[j++];
    }
    
    for(i=l;i<=r;i++){
        arr[i]=temp[i];
    }
    return inv_count;
    
}

int mergeSort(int arr[],int temp[],int i,int j){
    int mid,inv_count=0;
    if(i<j){
        mid=(i+j)/2;
        
        inv_count+=mergeSort(arr,temp,i,mid);
        inv_count+=mergeSort(arr,temp,mid+1,j);
        
        inv_count+=merge(arr,temp,i,mid+1,j);
    }
    return inv_count;
}

int main()
{
    int arr[]={5,3,2,4,1};
    int n=sizeof(arr)/sizeof(arr[0]);
    int *temp=new int[n];
    int ans=mergeSort(arr,temp,0,n-1);
    cout<<"Number of inversions "<<ans;
    delete []temp;
    return 0;
}
